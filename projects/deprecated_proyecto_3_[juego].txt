# Proyecto Split merge
# Nombre: PRUEBA
#

@ProjectName
PRUEBA

# Componentes {}

@Requirement

# Dialogue
The dialogue management CSCI initializes the game, and controls the dialogue with the user. This CSCI does not store any data about the creature, artifacts and players during the game. It calls functions from the other CSCIs as and when they are needed.
DM is the main controlling software for the game. It implements a cycle of providing a message to the user, and asking for a command. It processes the user’s commands, and performs the appropriate actions. It constructs all messages and descriptions given to the user, based on information provided by the other CSCIs. It provides appropriate feedback if the user types an invalid command. It calculates scores when asked, and can save and restore game states.
DM has to perform a certain amount of parsing which will be facilitated by constructing the following lists of verbs:
movement verbs (e.g. go, move, walk, etc.) – these are used with a direction to move between rooms. The direction must be one of those supplied as a valid portal from the current room.
fight words (e.g. hit, attack, etc.) – these are used to attack a monster, using the current weapon, if any. If the player is not currently grasping a weapon, then bare fists are used, which have a strength of 1. If there is more than one monster in the room, then the fight word must be used with the short name of the monster to be attacked. Otherwise, the fight word can be used on its own or with ‘it’.
information words (e.g. look, inspect, etc.) – these are used to get detailed descriptions. Used on their own, they apply to the room. If combined with a direction, they get the description of the portal in that direction. If used with a moveable object, they get the full description of that object.
inventory words (e.g. put, get, pick up, drop, grasp, wield, list, etc.) – these are used to manipulate artifacts. The player may pick up any artifact in the current room, by giving the appropriate verb, and the artifact’s short name. Artifacts picked up are removed from the room, and added to the player’s artifact list. Similarly, items may be put down. Any artifact that has been picked up may be used as a weapon by using 
the verb wield, plus the artifact’s short name. Artifacts that are not of the weapon class are ineffective as weapons (i.e. they do no damage to any monsters). The player can only wield one artifact at a time; wielding a new artifact implies the previous weapon is unwielded; although both are still in the player’s artifact list. The verb ‘list’ can be used to list the short names of all artifact’s carried by the player.
action words – These are all the verbs that can be used on specific objects, or classes of objects. This list must be compiled from the various objects used in the game, and is generated by a function provided by AM. These words must be combined with an object, to perform an action on that object. Tool use words are a special subset of action words. These require both an object and a tool. E.g. “unlock the oak door with the brass key”; “hit the egg with the hammer”, etc.). It may be desirable to break this into two interactions, e.g. “hit the egg” to which the system responds “with what?”... 
game commands (e.g. save, restore). These commands are used to save the current state of the game, or to restore a previous game from a file. The name of a file is required as a parameter.
In addition to these commands, the user can always give the command ‘help’ which provides a limited amount of help about how to play the game. This help message should also be given at the beginning of the game.
DM does not keep track of information about the player. The player always has unique id 0. The location and other attributes of the player can be determined using the locate(creature) command in CFM, with unique id 0.
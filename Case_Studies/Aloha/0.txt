@ProjectName
Aloha Social Network

@Requirement=REQ-1
User will create an account if there is no existing account associated with users email-id. User should enter account details such as name, email-id, contact number, birth date, captcha and password. All these are required fields and account creation cannot proceed unless these are filled. User is registered after this information is validated and user agrees with the terms and conditions. User must be 18 years old or more. Contact number should be a 10 digit numeric field. First and last name should not exceed 20 characters each. Password should be at least 8 characters long, at most 15 characters including at least one capital and small letter, a special character and a number. Any of the above fields must not have ( ‘ , “, : , ; , <, >, {, }, -, %, $, |, ], [).

@Requirement=REQ-2
When the user has registered, a verification link is sent to the email-id set at the time of registration so as to verify given email-id as genuine. After the user has verified the account, it will be marked as verified. Account privileges will not be given to the user until verification is complete. User should be able to re-send the verification link to his email-id.

@Requirement=REQ-3
User must be registered in order to Login. Input will be the email-id and password for login. The hash of password should match to the hash of password stored in the database. If three attempts of password are wrong then a captcha should appear. If more than 8 attempts go wrong, then the account will be locked and an e-mail will be sent to the user notifying about the wrong password attempts. To unlock the account, user must click on the unlock link sent to him in the email. If user clicks on forgot password then reset password link should be emailed to the user. Input to each field must be validated.

@Requirement=REQ-4
A part of building user profile. User should be able to add the educational details. These fields can remain empty. User must be logged in and his account should be marked as verified to be able to add education. Input to each field must be validated.

@Requirement=REQ-5
A part of building user profile. User should be able to add the personal details like language, gender, about user and his interests. These fields can remain empty. User must be logged in and his account should be marked as verified to be able to add personal information. Input to each field must be validated.

@Requirement=REQ-6
A part of building user profile. User should be able to add the account details like name, birth date, email-id, phone number and address. Name, birth date and email-id cannot be empty while the other two can remain empty. User must be logged in. Input to each field must be validated.

@Requirement=REQ-7
A part of building user profile. User should be able to edit the account details like name, birth date, email-id, phone number and address. Name, birth date and email-id cannot be empty while the other two can remain empty. If email is changed then email verification module should be called. User must be logged in. Input to each field must be validated.

@Requirement=REQ-8
User should be able to upload the profile picture. The size of profile picture should be at least 160px * 160px. User may leave this field empty. Profile image should be visible to all.

@Requirement=REQ-9
User should be able to make account details private or public according to his wish. By default the account details will be visible to public.

@Requirement=REQ-10
User should be able to make personal information private or public according to his wish. By default the personal information will be visible to public.

@Requirement=REQ-11
Any logged-in user should be able to see any user’s profile on Aloha.

@Requirement=REQ-12
User may delete his account permanently from ALOHA depending on his wish. User will be removed from his friends list once deleted. User information will be cleared.

@Requirement=REQ-13
A registered user of Aloha should be able to send add friend requests to other users of Aloha. User can send friend request to already registered users of Aloha. User can search his friend on Aloha among the registered users and then send a friend request to him/her.

@Requirement=REQ-14
If a user gets a friend request from another user, then the user receiving the request should have an option to accept or ignore the friend request. If the user selects to accept the friend request, the requestor is added to the friend list of the acceptor. If the user selected to ignore the request, the sender continues to see the status of the request as “Request Sent” and the request is removed from the queue of the request receiver.

@Requirement=REQ-15
A registered user of Aloha should be able to un-friend any of the existing friends in his/her friend’s list.

@Requirement=REQ-16
Whenever the user is on any person’s profile page, he should have an option to view currently open user profile’s friends on a page. User can have many friends and the maximum number of friends shown at a time will be 20, and paging will be implemented to show more friends if the user has more than 20 friends.

@Requirement=REQ-17
User should be able to search for his/her friends who may be registered on Aloha. User will put the name of the friend and click search after which the search results will display all the people registered on Aloha by the searched name. When the search results are displayed the maximum number of results shown at a time will be 20, and paging will be implemented to show more results.

@Requirement=REQ-18
User will be given suggestions for adding more friends. The friend suggestions will be based on the users having maximum number of mutual friends with the user. The maximum number of friend suggestions displayed will be 20 at a time, and paging will be implemented to show more suggestions.

@Requirement=REQ-19
User should be able to invite more friends to join the Aloha network. User will be given an option to enter the email address of the person to invite. User will be able to invite one friend at a time.

@Requirement=REQ-20
User should be able to see currently online friends among all his friends on Aloha. The user can chat with online friends by clicking on the currently available friends in the online friends list.

@Requirement=REQ-21
A registered user of Aloha can share scribbles with his friends. The scribble can only be plain English text with maximum 500 characters. User can enter the scribble in the designated text area by clicking on the Scribble button; it should be visible to the user and his friends.

@Requirement=REQ-22
A user can erase a scribble that has been posted. After deletion, the scribble should not be visible on the users’ or his friends’ slates. Deletion of a scribble should also remove all the comments associated with that scribble.

@Requirement=REQ-23
After a user logs into Aloha, he can see a listing of scribbles posted by him and his friends. The maximum number of scribbles displayed at a time will be 20, and paging will be implemented for more scribbles.

@Requirement=REQ-24
For each scribble visible to the user he has the ability to comment on it to express his opinion. The comment can contain only text and cannot exceed 500 characters in length. To comment, user can see a text area under the scribble, where he can enter the text.

@Requirement=REQ-25
A user can delete a comment written by him or a comment on his scribbles. For deleting a scribble that he is authorized to delete, a user can see a delete link near the comment.

@Requirement=REQ-26
Users can like a scribble by clicking on the “Thumb’s Up” button below the scribble. For any scribble, all users can see a count of the “Liked” scribble

@Requirement=REQ-27
Users can dislike a scribble by clicking on the “Thumb’s Down” button below the scribble. For any scribble, all users can see a count of the “Disliked” scribble.

@Requirement=REQ-28
User should be able to initiate ChitChat with any user in the friend list who is online. The other user must seamlessly understand that the ChitChat has been initiated and the ChitChat message must be forwarded to the intended user. User should be able to receive ChitChat from any user in the friend list who is online and within the friend list of that user. Thus the receiving entity can send message back to the originator, thus, completing a two-way conversation. The message cannot be greater than 250 characters in length.

@Requirement=REQ-29
Using this functionality user can send text files to online users. This helps user to share text documents with users on this platform. The maximum file size would be limited to 25 MB.

@Requirement=REQ-30
User should be able to store ChitChat on exit. So that if the user wants to keep history of the previous session, he can keep it to be brought back.

@Requirement=REQ-31
User should be able to retrieve ChitChat when the ChitChat when the user wants to see ChitChat history.